{"version":3,"sources":["webpack:///./src/components/GridCard/index.js","webpack:///./src/pages/projects.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/SEO/index.js","webpack:///./src/api/index.js","webpack:///./src/components/Tag/index.js"],"names":["Modal","setAppElement","CardHeader","_ref","headerImage","color","url","image","backgroundColor","react_default","a","createElement","href","className","style","backgroundImage","Icon","_ref2","title","icon","convertUrlToIcon","target","rel","index_es","GridCard","props","_this","_Component","call","this","openModal","setState","modalIsOpen","closeModal","state","render","_this$props","start","end","projectLink","resultLink","work","description","subtitle","_this$props$tags","tags","duration","getDuration","interjection","match","dateTxt","parseDateToMonth","GridCard_CardHeader","map","name","Tag","key","GridCard_Icon","onClick","lib_default","isOpen","onRequestClose","overlayClassName","contentLabel","str","Component","defaultProps","__webpack_require__","d","__webpack_exports__","query","withSize","allProjectFiles","data","width","size","projects","edges","forEach","node","push","grid","useRef","margin","Sidebar","react_stack_grid_lib_default","columnWidth","monitorImagesLoaded","gridRef","curr","current","arg","esm","handleHeight","handleWidth","onResize","updateLayout","id","src_components_GridCard","SEO","siteTitleAlt","isPost","LatestPost","posts","gatsby_browser_entry","to","frontmatter","slug","fields","Information","totalCount","components_Sidebar_LatestPost","config","wordings","githubUsername","email","profileImg","about","facebook","medium","linkedin","latestPosts","src","alt","Sidebar_Icon","components_Sidebar_Information","Sidebar_Sidebar","Object","assign","all","limited","_1307080370","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","_data__WEBPACK_IMPORTED_MODULE_2__","_data__WEBPACK_IMPORTED_MODULE_2___default","content","type","JSON","stringify","@context","@type","alternateName","itemListElement","position","item","@id","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username","isBrowser","maxPostsInPage","window","parseDate","date","dayjs","format","parseDateToDateTime","dtStart","dtEnd","diffHrs","diff","diffDays","diffMonths","count","react__WEBPACK_IMPORTED_MODULE_1___default"],"mappings":"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","file":"component---src-pages-projects-js-64ad6e8e233a7baf2717.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-modal';\n\nimport Tag from '../Tag';\nimport { convertUrlToIcon } from '../../api/url';\nimport { parseDateToMonth, getDuration } from '../../api';\n\nimport './index.scss';\n\nModal.setAppElement('#___gatsby');\n\nconst imageStyle = (headerImage, color) => ({\n  backgroundColor: `#${color}`,\n  backgroundImage: ` url(${headerImage})`,\n});\n\nconst CardHeader = ({ url, image, backgroundColor }) => (\n  <a href={url}>\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\n  </a>\n);\n\nconst Icon = ({ href, title }) => {\n  const icon = convertUrlToIcon(href);\n\n  return (\n    <a\n      target=\"_blank\"\n      href={href}\n      rel=\"external nofollow noopener noreferrer\"\n      className=\"custom-icon\"\n    >\n      <span className=\"fa-layers fa-fw fa-lg\" title={title}>\n        <FontAwesomeIcon icon={icon} />\n      </span>\n    </a>\n  );\n};\n\nclass GridCard extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      modalIsOpen: false\n    };\n  }\n\n  openModal = () => {\n    this.setState({modalIsOpen: true});\n  }\n  \n  closeModal = () => {\n    this.setState({modalIsOpen: false});\n  }\n\n  render() {\n    const {\n      title,\n      start,\n      end,\n      projectLink,\n      resultLink,\n      image,\n      work,\n      description,\n      subtitle,\n      tags = [],\n    } = this.props;\n    const url = resultLink || projectLink;\n    const duration = getDuration(start, end);\n    const interjection = (!end || duration.match(/months?$/)) ? 'from' : 'in';\n    const dateTxt = `${duration} ${interjection} ${parseDateToMonth(start)}`;\n\n    return (\n      <div className=\"pb-4\">\n        <div className=\"grid-card\">\n          {image && (\n            <CardHeader\n              url={url}\n              image={image}\n            />\n          )}\n          <div className=\"data\">\n            <div className=\"content\">\n              <div className=\"stats\">\n                <span className=\"date\">{dateTxt}</span>\n                {tags && tags.map(name => (\n                  <Tag name={name} key={name} />\n                ))}\n              </div>\n              <a href={url}>\n                <h4 className=\"title\">{title}</h4>\n              </a>\n              <span className=\"subtitle\">{subtitle}</span>\n              <p className=\"description\">{description}</p>\n              <div className=\"links\">\n                {resultLink && (\n                  <Icon\n                    href={resultLink}\n                    title=\"Check it out!\"\n                  />\n                )}\n                <span className=\"work\" onClick={this.openModal}>What I did</span>\n                {projectLink && (\n                  <Icon\n                    href={projectLink} \n                    title=\"View source\"\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onRequestClose={this.closeModal}\n          className=\"Modal\"\n          overlayClassName=\"Overlay\"\n          contentLabel=\"My Responsibilities\">\n          <ul>\n            {work.map(str => (<li key={str}>{str}</li>))}\n          </ul>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nGridCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  start: PropTypes.string.isRequired,\n  end: PropTypes.string,\n  projectLink: PropTypes.string,\n  resultLink: PropTypes.string,\n  image: PropTypes.string,\n  subtitle: PropTypes.string,\n  work: PropTypes.arrayOf(PropTypes.string).isRequired,\n  description: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nCardHeader.propTypes = {\n  url: PropTypes.string.isRequired,\n  image: PropTypes.string,\n  backgroundColor: PropTypes.string,\n}\n\nGridCard.defaultProps = {\n  image: '',\n  tags: [],\n  end: '',\n  subtitle: '',\n  projectLink: '',\n  resultLink: '',\n};\n\nexport default GridCard;\n","import React, { useRef } from 'react';\n\nimport { graphql } from 'gatsby';\nimport Sidebar from '../components/Sidebar';\nimport SEO from '../components/SEO';\nimport GridCard from '../components/GridCard';\nimport { withSize } from 'react-sizeme'\n\nimport StackGrid from \"react-stack-grid\";\nimport ReactResizeDetector from 'react-resize-detector';\n\nimport './projects.scss';\n\nconst ProjectsPage = ({ data: { allProjectFiles }, size: { width } }) => {\n  const projects = [];\n\n  allProjectFiles.edges.forEach(({ node: { data } }) => {\n    projects.push(data);\n  });\n\n  const grid = useRef(null);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\" style={{ margin: 15 }}>\n        <Sidebar />\n\n        <div className=\"col order-2\">\n          <StackGrid\n            columnWidth={width <= 768 ? '100%' : '50%'}\n            monitorImagesLoaded\n            gridRef={curr => grid.current = curr}\n          >\n            {projects.map(arg => (\n              <ReactResizeDetector\n                handleHeight\n                handleWidth\n                onResize={() => {\n                  if (grid.current) grid.current.updateLayout();\n                }}\n                key={arg.id}\n              >\n                <GridCard {...arg} />\n              </ReactResizeDetector>\n            ))}\n          </StackGrid>\n        </div>\n      </div>\n\n      <SEO\n        title=\"Projects\"\n        url=\"/projects/\"\n        siteTitleAlt=\"Shivansh Saini\"\n        isPost={false}\n        description=\"Projects Page\"\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default withSize()(ProjectsPage);\n\nexport const query = graphql`\n  query getAllProjects {\n    allProjectFiles: allFile(filter: {sourceInstanceName: {eq: \"data\"}, relativeDirectory: {eq: \"projects\"}}, sort: {fields: name, order: DESC}) {\n      totalCount\n      edges {\n        node {\n          data: childProjectsYaml {\n            id\n            title\n            subtitle\n            projectLink\n            resultLink\n            description\n            work\n            image\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst LatestPost = ({ posts }) => (\n  <div className=\"latest-post\">\n    <p>Latest Posts</p>\n    {posts.map(({ node }) => (\n      <Link\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n      >\n        {node.frontmatter.title}\n      </Link>\n    ))}\n  </div>\n);\n\nLatestPost.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\n// import Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\n// eslint-disable-next-line react/prop-types\nconst Information = ({ totalCount, posts }) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      {totalCount}\n      &nbsp; posts\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    {/* <hr /> */}\n    {/* <Friend /> */}\n  </div>\n);\n\nInformation.propTypes = {\n  totalCount: PropTypes.number.isRequired,\n  posts: PropTypes.array,\n};\n\nInformation.defaultProps = {\n  posts: [],\n};\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { config } from '../../../data';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUsername,\n  email,\n  profileImg,\n  about,\n  facebook,\n  medium,\n  linkedin,\n} = config;\n\nconst Icon = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-lg\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={profileImg} alt=\"shivanshs9\" />\n        <h4>Shivansh Saini</h4>\n      </Link>\n      <p className=\"mb-3\">\n        {wordings[0]}\n        &nbsp;//&nbsp;\n        {wordings[1]}\n      </p>\n      <Icon\n        href={`https://github.com/${githubUsername}`}\n        icon={['fab', 'github']}\n      />\n      {linkedin\n        && <Icon href={`https://linkedin.com/in/${linkedin}/`} icon={['fab', 'linkedin']} />\n      }\n      {medium\n        && <Icon href={`https://medium.com/@${medium}/`} icon={['fab', 'medium']} />\n      }\n      {facebook\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\n      }\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n","import dayjs from 'dayjs';\nimport { config } from '../../data';\n\nconst { maxPostsInPage } = config;\n\n// Prevent webpack window problem\nconst isBrowser = () => typeof window !== 'undefined';\n\nconst getPageNumber = () => (isBrowser() ? +window.location.pathname.match(/page[/](\\d)/)[1] : -1);\n\nconst getCurrentPage = () => {\n  if (isBrowser() === true) {\n    const str = window.location.pathname;\n    if (str.indexOf('page') !== -1) {\n      // Return the last pathname in number\n      return getPageNumber();\n    }\n  }\n\n  return 0;\n};\n\nconst getPath = () => (isBrowser() ? window.location.pathname : '');\n\nconst getMaxPages = amount => Math.ceil(amount / maxPostsInPage);\n\n// Array.fill() is added by trial and error\nconst getPages = amount => new Array(amount).fill().map((_, index) => `/page/${index + 1}`);\n\nconst overflow = () => getCurrentPage() === getMaxPages();\n\nconst parseDate = date => dayjs(date).format('DD/MM/YYYY');\n\nconst parseChineseDate = date => dayjs(date).format('DD/MM/YYYY');\n\nconst parseDateToDateTime = date => dayjs(date).format('YYYY, MMM DD | HH:mm');\n\nconst parseDateToMonth = date => dayjs(date).format('MMM, YYYY');\n\nconst getDuration = (start, end) => {\n  if (!end) return 'Working';\n  const dtStart = dayjs(start);\n  const dtEnd = dayjs(end);\n  const diffHrs = dtEnd.diff(dtStart, 'hour');\n  if (diffHrs <= 24) return `${diffHrs} hour${diffHrs > 1 ? 's' : ''}`;\n  const diffDays = dtEnd.diff(dtStart, 'day');\n  if (diffDays <= 30) return `${diffDays} day${diffDays > 1 ? 's' : ''}`;\n  const diffMonths = dtEnd.diff(dtStart, 'month');\n  return `${diffMonths} month${diffMonths > 1 ? 's' : ''}`;\n}\n\nexport {\n  isBrowser,\n  getCurrentPage,\n  getMaxPages,\n  getPages,\n  overflow,\n  parseDate,\n  parseChineseDate,\n  parseDateToDateTime,\n  getPath,\n  getPageNumber,\n  getDuration,\n  parseDateToMonth,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tag = ({ name, count }) => {\n  return (\n    <a href={`/tag/${name}`} className=\"header-tag\">\n      {name}\n      &nbsp;\n      {count && `(${count})`}\n    </a>\n  );\n}\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n"],"sourceRoot":""}