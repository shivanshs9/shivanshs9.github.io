{"componentChunkName":"component---src-templates-blog-post-js","path":"/medium/drf-problems-21f7bb4d4675","webpackCompilationHash":"fe50e637d7976f6688f0","result":{"data":{"content":{"edges":[{"node":{"id":"bc6728e2-83ff-53f7-9003-448f425f5425","html":"<h3 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h3>\n<p>Frustrated with tons of problems in DRF? Sorry, but this library doesn’t claim to fix them, regardless of what the library’s name may imply. :D This library does one thing only — implements <a href=\"https://tools.ietf.org/html/rfc7807\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 7807</a> in our favourite Django REST Framework! Or, in layman terms, it introduces “Problem Details” in the HTTP APIs.</p>\n<h3 id=\"why-do-i-care\"><a href=\"#why-do-i-care\" aria-label=\"why do i care permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why do I care?</h3>\n<p>Well, let’s suppose that you’re a star of API engineering and follow the best practices whenever building anything RESTful. Your serializers are neat, follows OpenAPI spec, incorporates proper versioning of endpoints and you know how to name your endpoints.</p>\n<p>Things were great until you realized that you need to inform clients of different kind of errors in the same endpoint. Now you get stuck googling and going through many of <a href=\"https://stackoverflow.com/questions/3050518/what-http-status-response-code-should-i-use-if-the-request-is-missing-a-required/3050561\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stack Overflow answers</a> on what status code to use!</p>\n<p>Questions, like “Should I use plain old 400? Or be more explicit and use 406 or 412? But their meanings are wrong in this context…”, pop up in your brain, but these aren’t adequately answered by Stack Overflow. And finally, you’ve hit a wall with these stupid HTTP status codes which just can’t solve your application issues (which actually makes sense, in hindsight :)) One solution you may think of is to just keep a long list of codes of all kinds of application issues, and use them in some Serializer. The grave issue with this is how these codes and their description be communicated to the API consumer. Now this will make your API difficult for any new client to use readily.</p>\n<p>Spotify, Google, Facebook etc also have different such schemas to explain these ‘problems’. And so, the biggest drawback of REST is the lack of standards to detail the problem… until <a href=\"https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>IETF</strong></a> published yet another document.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*cxZnaB23L0HaJVVo\" alt=\"Source: [My first experience creating an API](https://restful.io/making-my-first-api-using-python-flask-8d7d83e45e36)\">\nSource: <a href=\"https://restful.io/making-my-first-api-using-python-flask-8d7d83e45e36\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">My first experience creating an API</a></p>\n<h3 id=\"rfc-7807-to-the-rescue\"><a href=\"#rfc-7807-to-the-rescue\" aria-label=\"rfc 7807 to the rescue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RFC 7807 To The Rescue</h3>\n<p><a href=\"https://tools.ietf.org/html/rfc7807\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 7807</a> provides a standard format for returning problem details from HTTP APIs. Summary of the document:</p>\n<blockquote>\n<p>- The data model for problem details is a JSON <a href=\"https://tools.ietf.org/html/rfc7159\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC7159</a> object; when formatted as a JSON document, it uses the “application/problem+json” media type.</p>\n</blockquote>\n<blockquote>\n<p>- New problem type definitions MUST document:<br>\ni. a type URI (typically, with the “http” or “https” scheme),<br>\nii. a title that appropriately describes it (think short), and<br>\niii. the HTTP status code for it to be used with.</p>\n</blockquote>\n<h3 id=\"sure-its-great-but-is-this-implementation-easy-to-use\"><a href=\"#sure-its-great-but-is-this-implementation-easy-to-use\" aria-label=\"sure its great but is this implementation easy to use permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sure, it’s great. But is this implementation easy to use?</h3>\n<p>I faced this problem myself and have been looking for some solution. I stumbled upon the one for <a href=\"https://github.com/zalando/problem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java</a> and its <a href=\"https://github.com/zalando/problem-spring-web\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring library</a>. Since I couldn’t find any similar solution for python, I realized I’d have to do it myself. So, as I am the consumer of this library too, I made this library keeping the developers in mind and how we love flexible stuff. The library is available at <a href=\"https://github.com/shivanshs9/drf-problems/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>, for free (Duh! :P). It’s also indexed by <a href=\"https://pypi.org/project/drf-problems/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Package Index</a>.</p>\n<p>It’s based around the concept of reducing your exceptions to a ‘problem detail’ model mentioned above to communicate the problem directly via the API. A view is also included in the library for the error documentation and stuff. These are well and good, but it truly stands out by extending the DRF permission concept to include exceptions in it. Moreover, it’s upto-date with the latest DRF and works well with composable permissions. Now, one would no longer be confused with which permission failing after using two permissions with OR! To sate the ‘be flexible’ desire of most developers, this library provides mixins, which works well with your existing classes.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*DeouEsZ9-pifZvvd\"></p>\n<h3 id=\"nice-anyone-care-to-tell-how-to-try-it-out\"><a href=\"#nice-anyone-care-to-tell-how-to-try-it-out\" aria-label=\"nice anyone care to tell how to try it out permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nice. Anyone care to tell how to try it out?</h3>\n<p>To use this library, first follow the steps you usually follow for any Django library.</p>\n<ul>\n<li>Install using pip. <code class=\"language-text\">pip install drf-problems</code></li>\n<li>Add ‘<strong>drf_problems</strong>’ to your INSTALLED_APPS setting in your project’s <code class=\"language-text\">settings.py</code>.</li>\n</ul>\n<p>This library also requires replacing the DRF exception handler with its own implementation. In your <code class=\"language-text\">settings.py</code>, update:</p>\n<p>To use the problem description url, you need to update your <code class=\"language-text\">urls.py</code> to include the urlpatterns of this library too:</p>\n<p>With this much work, the library would work with the existing DRF exceptions and your custom ones. For the problem detail, it uses:</p>\n<ul>\n<li><strong>type</strong> — URI made from either <code class=\"language-text\">code</code> or <code class=\"language-text\">default_code</code> attribute of exception.</li>\n<li><strong>title</strong> — either <code class=\"language-text\">title</code> or <code class=\"language-text\">default_detail</code> attribute of exception.</li>\n<li><strong>description</strong> (used in error documentation) — uses <code class=\"language-text\">description</code> attribute of exception.</li>\n</ul>\n<p>To use the error documentation with custom exceptions, these need to be registered so that its code can be inferred. Here’s a way to register your exception with a decorator:</p>\n<p>Now with this done and using the ‘invalid_version’ code for the error documentation endpoint, its description and status code can be obtained.</p>\n<p>To use these kinds of exceptions with DRF permissions, you would first need to ensure that the corresponding view inherits from the provided <code class=\"language-text\">drf_problems.mixins.AllowPermissionWithExceptionViewMixin</code> mixin, like below:</p>\n<p>In the example above, a working permission is used which this library provides. <code class=\"language-text\">MinimumVersionRequiredPermission</code> takes in minimum API version as initialisation argument and checks that the request version is more than or equal to this minimum version. If not, then <code class=\"language-text\">drf_problems.exceptions.DeprecatedVersionUsedException</code> is raised.</p>\n<p>Finally, for the permissions, use either <code class=\"language-text\">drf_problems.permissions.ProblemPermissionMixin</code> mixin class with your existing permissions, or extend directly from <code class=\"language-text\">drf_problems.permissions.BaseProblemPermission</code>. The exception instance to raise is used from the <code class=\"language-text\">exception</code> attribute defined on the permission or created from the class in <code class=\"language-text\">exception_class</code> attribute defined on the permission.</p>\n<p>Here’s a sample permissions class:</p>\n<h3 id=\"what-if-it-blows-up-my-application\"><a href=\"#what-if-it-blows-up-my-application\" aria-label=\"what if it blows up my application permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What if it blows up my application?</h3>\n<p>While I’ve released V1.0.0, I cannot take guarantee of any bugs which may result in your application after including this library. Just open up an issue <a href=\"https://github.com/shivanshs9/drf-problems/issues/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>, and we can figure out what can be done to solve it.</p>\n<p>I appreciate all contributions — whether raising an issue, giving ideas for enhancement, opening a pull request or just discussing another IETF document! :D</p>\n<h3 id=\"didnt-quite-catch-your-name-yet\"><a href=\"#didnt-quite-catch-your-name-yet\" aria-label=\"didnt quite catch your name yet permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Didn’t quite catch your name yet</h3>\n<p>Well, sorry about introducing myself so late. I’m Shivansh Saini, an undergrad student of CSE in IIT (BHU), Varanasi. I’ve had some experience in developing and deploying web applications, whether it be on Dynos, App Engine, EC2 or Kubernetes architecture with Ingress. Besides the obvious backend development, I’ve done frontend projects like a PWA using Vue.JS and android apps. It’s my first time writing a technical blog, so I’d love to hear any criticisms you have for me on anything I can improve on or did well.</p>\n<p>Signing off, <br>\n<strong>TheFaker</strong></p>","excerpt":"TL;DR Frustrated with tons of problems in DRF? Sorry, but this library doesn’t claim to fix them, regardless of what the library’s name may…","fields":{"slug":"/medium/drf-problems-21f7bb4d4675"},"frontmatter":{"id":"drf-problems-21f7bb4d4675","title":"DRF-Problems: Finally a Django library which implements RFC 7807!","slug":"/medium/drf-problems-21f7bb4d4675","date":"2019-06-07T23:30:47.156Z","headerImage":"https://cdn-images-1.medium.com/max/2560/1*K9Z-b-LPo60LFSUkl-mrUg.png"}},"previous":null,"next":null}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"bc6728e2-83ff-53f7-9003-448f425f5425","index":0}}}